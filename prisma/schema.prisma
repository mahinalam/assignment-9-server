generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  role          UserRole        @default(CUSTOMER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isDeleted     Boolean         @default(false)
  customer      Customer?
  vendor        Vendor?
  admin         Admin?
  wishlist      Wishlist[]
  followingShop FollowingShop[]
  compare       Compare[]

  @@map("users")
}

model Customer {
  id           String   @id @default(uuid())
  userId       String   @unique
  email        String   @unique
  name         String
  phoneNumber  String?
  profilePhoto String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Boolean  @default(false)
  gender       Gender?
  user         User     @relation(fields: [userId], references: [id])

  Cart   Cart?
  review Review[]

  @@map("customers")
}

model Vendor {
  id           String   @id @default(uuid())
  userId       String   @unique
  email        String   @unique
  name         String
  phoneNumber  String?
  profilePhoto String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Boolean  @default(false)
  gender       Gender?
  user         User     @relation(fields: [userId], references: [id])
  shop         Shop?

  @@map("vendors")
}

model Admin {
  id           String   @id @default(uuid())
  userId       String   @unique
  email        String   @unique
  name         String
  phoneNumber  String?
  profilePhoto String?
  address      String?
  gender       Gender?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  imageUrl  String
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]

  @@map("categories")
}

model Shop {
  id            String          @id @default(uuid())
  name          String
  logo          String?
  description   String
  address       String
  status        ShopStatus      @default(ACTIVE)
  vendorId      String          @unique
  isDeleted     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  vendor        Vendor          @relation(fields: [vendorId], references: [id])
  product       Product[]
  followingShop FollowingShop[]
  cart          Cart[]
  order         Order[]
  review        Review[]

  @@map("shops")
}

model Product {
  id               String   @id @default(uuid())
  name             String
  price            Int
  discount         Int?     @default(0)
  stock            Int
  isFlashed        Boolean  @default(false)
  isFeatured       Boolean  @default(false)
  images           String[] @default([])
  isDeleted        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  shopId           String
  categoryId       String
  shortDescription String?
  longDescription  String

  shop      Shop        @relation(fields: [shopId], references: [id])
  category  Category    @relation(fields: [categoryId], references: [id])
  cartItem  CartItem[]
  orderItem OrderItem[]
  review    Review[]
  wishlist  Wishlist[]
  compare   Compare[]

  @@map("products")
}

model Coupon {
  id         String     @id @default(uuid()) // Unique identifier for each coupon
  code       String     @unique // Coupon code, e.g., "SUMMER20"
  discount   Float
  type       CouponType @default(PERCENTAGE)
  expiration DateTime
  isDeleted  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("coupons")
}

model FollowingShop {
  userId    String
  shopId    String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  shop Shop @relation(fields: [shopId], references: [id])

  @@id([userId, shopId]) // This defines a composite primary key
  @@map("following_shops") // (Optional) Custom table name in the database
}

model Cart {
  id         String   @id @default(uuid())
  customerId String   @unique
  shopId     String
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  shop     Shop     @relation(fields: [shopId], references: [id])

  cartItem CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Float
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])

  @@map("cart_items")
}

model Order {
  id              String        @id @default(uuid())
  customerEmail   String
  customerName    String
  phoneNumber     String
  shippingAddress String
  profilePhoto    String?
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  totalPrice      Float

  shopId        String
  transactionId String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)

  shop Shop @relation(fields: [shopId], references: [id])

  orderItem OrderItem[]
  payment   Payment?

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  productId String

  product Product @relation(fields: [productId], references: [id])
  orderId String
  order   Order   @relation(fields: [orderId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(uuid())
  amount        Float
  method        PaymentMethod @default(CASH_ON_DELIVERY)
  status        PaymentStatus @default(PENDING)
  transactionId String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean       @default(false)

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  email      String?
  name       String?
  images     String[] @default([])
  productId  String?
  customerId String?
  shopId     String?

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product  Product?  @relation(fields: [productId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
  shop     Shop?     @relation(fields: [shopId], references: [id])

  @@map("reviews")
}

model Wishlist {
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([userId, productId])
  @@map("wish_lists")
}

model Compare {
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([userId, productId])
  @@map("compare")
}

model NewsLetter {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)

  @@map("news_letters")
}

model Contact {
  id      String @id @default(ulid())
  email   String
  name    String
  subject String
  message String

  @@map("contacts")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ShopStatus {
  ACTIVE
  BLOCKED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
}

enum CouponType {
  PERCENTAGE
  FXED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BKASH
  CASH_ON_DELIVERY
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  password     String
  role         UserRole
  phoneNumber  String?
  profilePhoto String?
  address      String?
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  isDeleted    Boolean    @default(false)

  shop   Shop?
  review Review[]

  followingShop FollowingShop[]
  cart          Cart?

  @@map("users")
}

model Shop {
  id          String   @id @default(uuid())
  name        String
  description String?
  address     String
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  ownerId       String          @unique
  owner         User            @relation(fields: [ownerId], references: [id])
  products      Product[]
  followingShop FollowingShop[]
  order         Order[]
  cart          Cart[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  imageUrl  String?
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]

  @@map("categories")
}

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  logoUrl     String?
  description String    @default("")
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product[]

  @@map("brands")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  newPrice    Int
  oldPrice    Int
  stock       Int
  isFlash     Boolean     @default(false)
  images      String[]    @default([])
  disCounts   Int         @default(0)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  shop        Shop?       @relation(fields: [shopId], references: [id])
  shopId      String?
  brandId     String?
  brand       Brand?      @relation(fields: [brandId], references: [id])
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItem   OrderItem[]
  review      Review[]
  cartItem    CartItem[]

  @@map("products")
}

model Cart {
  id         String   @id @default(uuid())
  customerId String   @unique
  shopId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer  User       @relation(fields: [customerId], references: [id])
  shop      Shop       @relation(fields: [shopId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id                      String        @id @default(uuid())
  status                  OrderStatus   @default(PENDING)
  totalPrice              Float
  transactionId           String        @unique
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  isDeleted               Boolean       @default(false)
  customerEmail           String        @unique
  customerName            String
  customerPhone           String
  customerShippingAddress String
  shopId                  String
  shop                    Shop          @relation(fields: [shopId], references: [id])
  orderItems              OrderItem[]
  payment                 Payment?
  paymentStatus           PaymentStatus @default(PENDING)
  orderStatus             OrderStatus   @default(PENDING)
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  productId String

  product Product @relation(fields: [productId], references: [id])
  orderId String
  order   Order   @relation(fields: [orderId], references: [id])
}

model Coupon {
  id          String     @id @default(uuid()) // Unique identifier for each coupon
  code        String     @unique // Coupon code, e.g., "SUMMER20"
  discount    Float
  type        CouponType @default(PERCENTAGE)
  expiration  DateTime
  minPurchase Float?
  usageCount  Int        @default(0)
  maxUsage    Int?
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([code])
}

enum CouponType {
  PERCENTAGE
  FIXED
}

model Payment {
  id            String        @id @default(uuid())
  amount        Float
  method        PaymentMethod @default(CASH_ON_DELIVERY)
  status        PaymentStatus @default(PENDING)
  transactionId String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean       @default(false)

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  images    String[] @default([])
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  isDeleted Boolean  @default(false)
}

model FollowingShop {
  followerId String
  shopId     String

  user User @relation(fields: [followerId], references: [id])
  shop Shop @relation(fields: [shopId], references: [id])

  @@id([followerId, shopId]) // This defines a composite primary key
  @@map("following_shops") // (Optional) Custom table name in the database
}

enum UserRole {
  ADMIN
  VENDOR
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BKASH
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
